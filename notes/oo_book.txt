* object oriented programing intro
  * objectives
    * creates containers for data that can be changed with affecting the rest of the
      program
    * OO programs are the interaction of many small parts
  * encapsulation
    * a programming approach that hides functionality
    * encapsulated functionality is unavailable to the rest of the code base
    * accomplished by creating objects and invoking methods on those objects
  * polymorphism
    * data can be represented as many different types
    * inheritance allows a class to inherit the behavior of a parent class
    * a superclass is the parent of a class
    * a subclass is the child class of a superclass
    * modules are similar to classes, however they cannot create an object
    * use the include ModuleName construct to include a modules methods
      and data in a class
* what is an object
  * everything in Ruby is an object (almost)
* classes define objects
  * classes encapsulate the behavior(methods) and data(instance variables) of an object
  * class are created with class ClassName; end; construct
  * use CamelCase for class naming by convention
  * objects are instantiated by call the class method new
* class and objects
  * a class will devine states(attributes) and behaviors
  * instances variables store the state of the object's data
  * instance methods store the behavior of the instantiated object
  * all objects of a class have the same set of behaviors
* initializing a new object with instances variables
  * use the 'def initialize' method 
  * when invoking ClassName.new, the initialize method is automatically called
  * instances variables can be initialized when the object is created
  * by passing parameters to the new method
  * instances variables live on as long as the object instance exists
* instance methods
  * all objects of the same class have the same instance methods(behaviors)
  * methods have access to instance variables
* accessor methods
  * can be used to return the value of an instance method
  * def name; @name; end;
  * this is called a getter method
  * use a setter method to set the value of an instance variable
  * for a setter method we can use the set_name= syntax
  * this gives us some syntactical sugar by allowing: object.set_name = "string"
* accessor methods 2
  * save some lines of code by using attr_accessor method
  * pass the instance variables represented as symbols as arguments to the method
  * attr_accessor :var, :another var
  * attr_accessor creates getter and setter methods for the instances of the class
  * attr_reader creates getter method
  * attr_writer creates setter method
  * this allows us to reference the getter and setter methods directly
  * they we can make changes to how the variable is get or set in one place
  * getter and setter methods also give us the instance variables corresponding
* calling methods with self
  * we can't just use a setter method to set an instance variable 
  * when doing so inside a method
  * ruby thinks that we are just creating a local variable
  * so instead use 'self.method_name'
  * using self disambiguates from creating a local variable
  * this could be used for getter methods as well, but it is not required.
* class methods
  * clas methods are created with the self keyword:
    def self.method_name
  * class methods are invoked on the class itself, not an instance of the class
    ClassName.class_method
* class variables
  * use two @@ to indicate a class variable
  * class variables can be accessed from an instance method
  * used to track data about the class not about instances
* constants
  * constant can be created at the class level
  * constant naming style is all caps and snake case CONSTANT_NAME
  * constants do not change
  * constants can be accessed by instance and class methods
* to_s method
  * the native to_s method is called automatically when passing a string to the
    puts method
  * default to_s prints the object automatically, which is not desirable when
    printing an object
  * override default to_s by creating a to_s instance method in the class
  * note that the p method does not call to_s
  * to_s is automatically called when interpolating a string
* more about self
  * self is used to specify a certain scope in a program
  * use self in these cases
    * when calling a setter method from within a class:
      def method_name
        self.setter = x
      end
    * self.class_method_name for class method definitions
  * when used as a class method definition
    * inside the class self represents the class
    * when we write def self.method_name
    * self refers to the class.  def self.method_name == def ClassName.method_name
* class inheritance
  * the inheriting class is the subclass
  * superclass is the class subclass inherits from
  * inheritance is use to extract common behaviors to a superclass
  * the < operator is used to indicate inheritance class SubClass < SuperClass
  * we can override an instance method by defining the same method in the SubClass
* super method
  * super is called inside an instance method
  * super invokes the same method in the SuperClass
  * super passes all arguments from the enclosing method
  * you can pass arguments explicitly with super as well
  * super is often used in the initialize method
* module mixins
  * modules are created with the module keyword
    module ModuleName
  * use camelcase, starting with capital letter (like class names)
  * SuperClasses and SubClass are useful for modeling a natural hierarchy
  * modules allow for exceptions to the strict class hierarchy
  * only single inheritane from a class is allowed
  * multiple modules can be mixed in to a class
    include ModuleName, AnotherModule
* method lookup
  * ruby will follow a path up the class hierarchy looking for a method to run
  * the method lookup path can be viewed with ancestors method
    ClassName.ancestors
  * the order of ancestors
    current class, modules(inorder included), SuperClass(es)
  * if method is not found then ruby throws undefined method error
  * the last module is interogated first when listing includes:
    include ModuleOne
    include ModuleTwo  # module two search before module one
  * but they are interogated in order with this syntax
    include ModuleOne, ModuleTwo
* use cases for modules
  * mixing in common behavior and attributes
  * name spacing - by organizing similiar classes in a module
    * classes within a module are called with ::
      buddy = Mammal::Dog.new
  * defining out of place methods
    * called with ::
      value = Module::some_method(arguments)   # (or)
      value = Module.some_method(args)  # preferred
* private, protected, public
  * public methods can be called from any instance of an object
  * public methods can be called from the class name
  * private methods can only be called by other instance methods
  * to define methods as private, use the private keyword
    all methods following such will be private until we use another keyword
    private
    def some_method
    end
  * protected
    * similar to private in that they cannot be called from outside the class
    * protected methods can be called from within the class
  * 
